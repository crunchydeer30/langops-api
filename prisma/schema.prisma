datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator jsonTypes {
  provider = "prisma-json-types-generator"
}

// Enums
enum EditorRole {
  REGULAR
  SENIOR

  @@map("editor_roles")
}

enum OrderStatus {
  PENDING_SUBMISSION
  IN_PROGRESS
  COMPLETED
  PARTIALLY_COMPLETED
  FAILED
  CANCELLED

  @@map("order_statuses")
}

enum EditorLanguagePairQualificationStatus {
  INITIAL_EVALUATION_REQUIRED
  INITIAL_EVALUATION_IN_PROGRESS
  REEVALUATION_REQUIRED
  REEVALUATION_IN_PROGRESS
  QUALIFIED
  FAILED

  @@map("editor_language_pair_qualification_statuses")
}

enum EditorApplicationStatus {
  PENDING_REVIEW
  ACCEPTED
  REJECTED
  REGISTRATION_PENDING
  COMPLETED

  @@map("editor_application_statuses")
}

enum EvaluationSetStatus {
  PENDING_TASKS_GENERATION
  PENDING_EDITOR_SUBMISSION
  PENDING_REVIEW
  REVIEWED

  @@map("evaluation_set_statuses")
}

enum EvaluationType {
  INITIAL_QUALIFICATION
  PERIODIC_REVIEW

  @@map("evaluation_types")
}

enum StaffRole {
  ADMIN
  SUPPORT
  CONTENT_MANAGER

  @@map("staff_roles")
}

enum TranslationStage {
  READY_FOR_PROCESSING
  TEMPLATING
  MACHINE_TRANSLATION
  READY_FOR_EDITING
  EDITED

  @@map("translation_stages")
}

enum TranslationTaskStatus {
  QUEUED
  ACTIVE
  SUCCESS
  FAILURE
  CANCELLED_BY_USER
  PAUSED_BY_SYSTEM

  @@map("translation_task_statuses")
}

enum TranslationTaskSegmentStatus {
  PENDING_PARSING
  PARSED
  PENDING_MT
  MACHINE_TRANSLATED
  PENDING_HUMAN_EDIT
  HUMAN_EDITED
  COMPLETED
  ERROR_PARSING
  ERROR_MT
  ERROR_PROCESSING

  @@map("translation_task_segment_statuses")
}

enum TranslationTaskType {
  EMAIL
  PLAIN_TEXT

  @@map("translation_task_type")
}

enum OrderType {
  EMAIL
  PLAIN_TEXT

  @@map("order_type")
}

// Models
model Customer {
  id                         String  @id @default(uuid()) @db.Uuid
  email                      String  @unique
  passwordHash               String  @map("password_hash")
  firstName                  String  @map("first_name")
  lastName                   String  @map("last_name")
  emailVerified              Boolean @default(false) @map("email_verified")
  emailVerificationTokenHash String? @map("email_verification_token_hash")
  passwordResetTokenHash     String? @map("password_reset_token_hash")

  orders Order[] @relation("CustomerOrders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Editor {
  id                     String     @id @default(uuid()) @db.Uuid
  email                  String     @unique
  passwordHash           String     @map("password_hash")
  firstName              String     @map("first_name")
  lastName               String     @map("last_name")
  role                   EditorRole @map("role")
  passwordResetTokenHash String?    @map("password_reset_token_hash")

  languagePairs EditorLanguagePair[]
  applications  EditorApplication[]  @relation("ApplicantApplications")

  evaluationSetsAsApplicant EvaluationSet[] @relation("EditorEvaluationSets")
  evaluationSetsAsReviewer  EvaluationSet[] @relation("SeniorEditorReviewedEvaluationSets")

  editedTasks TranslationTask[] @relation("EditorTasks")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("editors")
}

model StaffMember {
  id                     String    @id @default(uuid()) @db.Uuid
  email                  String    @unique
  passwordHash           String    @map("password_hash")
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  role                   StaffRole @map("role")
  passwordResetTokenHash String?   @map("password_reset_token_hash")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("staff_members")
}

model Language {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String

  sourceFor LanguagePair[] @relation("SourceLanguage")
  targetFor LanguagePair[] @relation("TargetLanguage")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("languages")
}

model LanguagePair {
  id               String   @id @default(uuid()) @db.Uuid
  sourceLanguage   Language @relation("SourceLanguage", fields: [sourceLanguageId], references: [id])
  sourceLanguageId String   @db.Uuid
  targetLanguage   Language @relation("TargetLanguage", fields: [targetLanguageId], references: [id])
  targetLanguageId String   @db.Uuid

  orders                         Order[]
  editors                        EditorLanguagePair[]
  editorApplicationLanguagePairs EditorApplicationLanguagePair[]
  evaluationSets                 EvaluationSet[]
  translationTasks               TranslationTask[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([sourceLanguageId, targetLanguageId])
  @@map("language_pairs")
}

model EditorLanguagePair {
  id String @id @default(uuid()) @db.Uuid

  editorId       String       @map("editor_id") @db.Uuid
  editor         Editor       @relation(fields: [editorId], references: [id])
  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  qualificationStatus EditorLanguagePairQualificationStatus @map("qualification_status")
  rating              Float?
  lastEvaluationAt    DateTime?                             @map("last_evaluation_at")

  evaluationSet EvaluationSet? @relation("EvaluationForLanguagePair")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([editorId, languagePairId], name: "uq_editor_language_pairs_editor_language_pair")
  @@map("editor_language_pairs")
}

model Order {
  id     String      @id @default(uuid()) @db.Uuid
  status OrderStatus @default(PENDING_SUBMISSION) @map("status")

  customerId     String       @map("customer_id") @db.Uuid
  customer       Customer     @relation("CustomerOrders", fields: [customerId], references: [id])
  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])
  type           OrderType

  translationTasks TranslationTask[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model TranslationTask {
  id      String @id @default(uuid()) @db.Uuid
  orderId String @map("order_id") @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id])

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  editorId String? @map("editor_id") @db.Uuid
  editor   Editor? @relation("EditorTasks", fields: [editorId], references: [id])

  sourceContent    String  @map("source_content")
  templatedContent String? @map("templated_content")

  status       TranslationTaskStatus @default(QUEUED) @map("status")
  currentStage TranslationStage      @default(READY_FOR_PROCESSING) @map("current_stage")

  segments             TranslationTaskSegment[]
  sensitiveDataMapping SensitiveDataMapping?

  type TranslationTaskType

  // Word count for pricing and metrics
  wordCount              Int         @default(0) @map("word_count")
  estimatedDurationSecs  Int?        @map("estimated_duration_secs")
  
  // Editor assignment tracking
  editorAssignedAt       DateTime?   @map("editor_assigned_at")
  editorCompletedAt      DateTime?   @map("editor_completed_at")
  
  assignedAt  DateTime? @map("assigned_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("translation_tasks")
}

model TranslationTaskSegment {
  id                String          @id @default(uuid()) @db.Uuid
  translationTaskId String          @map("translation_task_id") @db.Uuid
  translationTask   TranslationTask @relation(fields: [translationTaskId], references: [id], onDelete: Cascade)

  segmentOrder Int @map("segment_order")

  sourceContent            String  @map("source_content")
  machineTranslatedContent String? @map("machine_translated_content")
  editedContent            String? @map("edited_content")

  /// [TranslationSpecialTokenMap]
  specialTokensMap Json @map("special_tokens_map") @db.JsonB

  status TranslationTaskSegmentStatus @default(PENDING_PARSING) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([translationTaskId, segmentOrder])
  @@map("translation_task_segments")
}

model EditorApplication {
  id        String                  @id @default(uuid()) @db.Uuid
  email     String                  @unique
  firstName String
  lastName  String
  status    EditorApplicationStatus @default(PENDING_REVIEW)

  requestedLanguagePairs  EditorApplicationLanguagePair[]
  registrationTokenHash   String?                         @unique @map("registration_token_hash")
  registrationTokenIsUsed Boolean?                        @default(false) @map("registration_token_is_used")

  editorId String? @unique @map("editor_id") @db.Uuid
  editor   Editor? @relation("ApplicantApplications", fields: [editorId], references: [id])

  rejectionReason String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("editor_applications")
}

model EditorApplicationLanguagePair {
  id String @id @default(uuid()) @db.Uuid

  applicationId String            @map("application_id") @db.Uuid
  application   EditorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([applicationId, languagePairId])
  @@map("editor_application_language_pairs")
}

model EvaluationSet {
  id            String              @id @default(uuid()) @db.Uuid
  type          EvaluationType      @map("type")
  status        EvaluationSetStatus @default(PENDING_TASKS_GENERATION) @map("status")
  averageRating Float?              @map("average_rating")

  editorId       String       @map("editor_id") @db.Uuid
  editor         Editor       @relation("EditorEvaluationSets", fields: [editorId], references: [id])
  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  evaluatorId String? @map("evaluator_id") @db.Uuid
  evaluator   Editor? @relation("SeniorEditorReviewedEvaluationSets", fields: [evaluatorId], references: [id])

  editorLanguagePairId String?             @unique @map("editor_language_pair_id") @db.Uuid
  editorLanguagePair   EditorLanguagePair? @relation("EvaluationForLanguagePair", fields: [editorLanguagePairId], references: [id])

  tasks EvaluationTask[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([editorId, languagePairId, createdAt], name: "uq_evaluation_sets_editor_lp_created")
  @@map("evaluation_sets")
}

model EvaluationTask {
  id                   String  @id @default(uuid()) @db.Uuid
  order                Int
  rating               Int?
  seniorEditorFeedback String? @map("senior_editor_feedback")

  evaluationSetId String        @map("evaluation_set_id") @db.Uuid
  evaluationSet   EvaluationSet @relation(fields: [evaluationSetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([evaluationSetId, order], name: "uq_evaluation_tasks_set_order")
  @@map("evaluation_tasks")
}

model SensitiveDataMapping {
  id       String @id @default(uuid()) @db.Uuid
  tokenMap Json   @map("token_map") @db.JsonB

  translationTaskId String          @unique @map("translation_task_id") @db.Uuid
  translationTask   TranslationTask @relation(fields: [translationTaskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sensitive_data_mappings")
}
