datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EditorRole {
  REGULAR
  SENIOR
}

enum OrderStatus {
  PENDING
  PENDING_AI
  PENDING_EDITOR_ASSIGNMENT
  IN_EDITING
  PENDING_SENIOR_REVIEW
  IN_SENIOR_REVIEW
  COMPLETED
  REJECTED
}

enum EditorLanguagePairQualificationStatus {
  INITIAL_EVALUATION_REQUIRED
  INITIAL_EVALUATION_IN_PROGRESS
  REEVALUATION_REQUIRED
  REEVALUATION_IN_PROGRESS
  QUALIFIED
  FAILED
}

enum EditorApplicationStatus {
  PENDING_REVIEW
  ACCEPTED
  REJECTED
  REGISTRATION_PENDING
  COMPLETED
}

enum EvaluationSetStatus {
  PENDING_TASKS_GENERATION
  PENDING_EDITOR_SUBMISSION
  PENDING_REVIEW
  REVIEWED
}

enum EvaluationType {
  INITIAL_QUALIFICATION
  PERIODIC_REVIEW
}

enum StaffRole {
  ADMIN
  SUPPORT
  CONTENT_MANAGER
}

model Customer {
  id           String @id @default(uuid()) @db.Uuid
  email        String @unique
  passwordHash String @map("password_hash")
  firstName    String @map("first_name")
  lastName     String @map("last_name")

  emailVerified              Boolean @default(false) @map("email_verified")
  emailVerificationTokenHash String? @map("email_verification_token_hash")
  passwordResetTokenHash     String? @map("password_reset_token_hash")

  orders Order[] @relation("CustomerOrders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Editor {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique
  passwordHash String     @map("password_hash")
  firstName    String     @map("first_name")
  lastName     String     @map("last_name")
  role         EditorRole

  passwordResetTokenHash String? @map("password_reset_token_hash")

  languagePairs  EditorLanguagePair[]
  editedOrders   Order[]              @relation("EditorOrders")
  reviewedOrders Order[]              @relation("SeniorEditorOrders")

  applications              EditorApplication[] @relation("ApplicantApplications")
  evaluationSetsAsApplicant EvaluationSet[]     @relation("EditorEvaluationSets")
  evaluationSetsAsReviewer  EvaluationSet[]     @relation("SeniorEditorReviewedEvaluationSets")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("editors")
}

model Language {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique
  name String

  sourceFor LanguagePair[] @relation("SourceLanguage")
  targetFor LanguagePair[] @relation("TargetLanguage")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("languages")
}

model LanguagePair {
  id               String   @id @default(uuid()) @db.Uuid
  sourceLanguage   Language @relation("SourceLanguage", fields: [sourceLanguageId], references: [id])
  sourceLanguageId String   @db.Uuid
  targetLanguage   Language @relation("TargetLanguage", fields: [targetLanguageId], references: [id])
  targetLanguageId String   @db.Uuid

  orders                         Order[]
  editors                        EditorLanguagePair[]
  editorApplicationLanguagePairs EditorApplicationLanguagePair[]
  evaluationSets                 EvaluationSet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([sourceLanguageId, targetLanguageId])
  @@map("language_pairs")
}

model EditorLanguagePair {
  id String @id @default(uuid()) @db.Uuid

  editorId String @map("editor_id") @db.Uuid
  editor   Editor @relation(fields: [editorId], references: [id])

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  qualificationStatus EditorLanguagePairQualificationStatus
  rating              Float?
  lastEvaluationAt    DateTime?                             @map("last_evaluation_at")

  evaluationSet EvaluationSet? @relation("EvaluationForLanguagePair")

  @@unique([editorId, languagePairId])
  @@map("editor_language_pairs")
}

model Order {
  id String @id @default(uuid()) @db.Uuid

  customerId String   @map("customer_id") @db.Uuid
  customer   Customer @relation("CustomerOrders", fields: [customerId], references: [id])

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  editorId String? @map("editor_id") @db.Uuid
  editor   Editor? @relation("EditorOrders", fields: [editorId], references: [id])

  seniorEditorId String? @map("senior_editor_id") @db.Uuid
  seniorEditor   Editor? @relation("SeniorEditorOrders", fields: [seniorEditorId], references: [id])

  originalText             String  @map("original_text")
  taskSpecificInstructions String? @map("task_specific_instructions")

  status OrderStatus

  translationSegments TranslationSegment[]

  evaluationTasks EvaluationTask[] @relation("OrderEvaluationTasks")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model TranslationSegment {
  id String @id @default(uuid()) @db.Uuid

  orderId String? @map("order_id") @db.Uuid
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  evaluationTaskId String?         @map("evaluation_task_id") @db.Uuid
  evaluationTask   EvaluationTask? @relation(fields: [evaluationTaskId], references: [id], onDelete: Cascade)

  sequenceNumber Int @map("sequence_number")

  originalText      String  @map("original_text")
  aiTranslatedText  String? @map("ai_translated_text")
  humanEditedText   String? @map("human_edited_text")
  finalApprovedText String? @map("final_approved_text")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([orderId, sequenceNumber], name: "orderSegmentUnique", map: "order_segment_unique")
  @@unique([evaluationTaskId, sequenceNumber], name: "evaluationSegmentUnique", map: "evaluation_segment_unique")
  @@map("translation_segments")
}

model EditorApplication {
  id        String                  @id @default(uuid()) @db.Uuid
  email     String                  @unique
  firstName String
  lastName  String
  status    EditorApplicationStatus @default(PENDING_REVIEW)

  requestedLanguagePairs  EditorApplicationLanguagePair[]
  registrationTokenHash   String?                         @unique @map("registration_token_hash")
  registrationTokenIsUsed Boolean?                        @default(false) @map("registration_token_is_used")

  editorId String? @unique @map("editor_id") @db.Uuid
  editor   Editor? @relation("ApplicantApplications", fields: [editorId], references: [id])

  rejectionReason String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("editor_applications")
}

model EditorApplicationLanguagePair {
  id String @id @default(uuid()) @db.Uuid

  applicationId String            @map("application_id") @db.Uuid
  application   EditorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([applicationId, languagePairId])
  @@map("editor_application_language_pairs")
}

model EvaluationSet {
  id String @id @default(uuid()) @db.Uuid

  editorId String @map("editor_id") @db.Uuid
  editor   Editor @relation("EditorEvaluationSets", fields: [editorId], references: [id])

  languagePairId String       @map("language_pair_id") @db.Uuid
  languagePair   LanguagePair @relation(fields: [languagePairId], references: [id])

  type          EvaluationType
  status        EvaluationSetStatus @default(PENDING_TASKS_GENERATION)
  averageRating Float?

  assignedSeniorEditorId String? @map("assigned_senior_editor_id") @db.Uuid
  assignedSeniorEditor   Editor? @relation("SeniorEditorReviewedEvaluationSets", fields: [assignedSeniorEditorId], references: [id])

  tasks EvaluationTask[]

  editorLanguagePairId String?             @unique @map("editor_language_pair_id") @db.Uuid
  editorLanguagePair   EditorLanguagePair? @relation("EvaluationForLanguagePair", fields: [editorLanguagePairId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([editorId, languagePairId, createdAt])
  @@map("evaluation_sets")
}

model EvaluationTask {
  id String @id @default(uuid()) @db.Uuid

  evaluationSetId String        @map("evaluation_set_id") @db.Uuid
  evaluationSet   EvaluationSet @relation(fields: [evaluationSetId], references: [id], onDelete: Cascade)

  order Int

  sourceOrderId String? @map("source_order_id") @db.Uuid
  sourceOrder   Order?  @relation("OrderEvaluationTasks", fields: [sourceOrderId], references: [id])

  segments TranslationSegment[]

  rating               Int?
  seniorEditorFeedback String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([evaluationSetId, order])
  @@map("evaluation_tasks")
}

model StaffMember {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  role         StaffRole

  passwordResetTokenHash String? @map("password_reset_token_hash")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("staff_members")
}
